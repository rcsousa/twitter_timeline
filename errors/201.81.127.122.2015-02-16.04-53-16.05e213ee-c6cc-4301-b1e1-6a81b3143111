(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'rcsousa@br.ibm.com'"
p3
sS'layer'
p4
S'/var/www/web2py/applications/twitkiller/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n\n    return dict()\n\n@auth.requires_login()\ndef post():\n    from tweet_tasks import save_post, update_timeline\n    import uuid\n    form=SQLFORM(db.tweet,fields=[\'post\'])\n    form.vars.tweet_id = uuid.uuid1()\n    form.vars.user_id=auth.user_id\n    form.vars.created_on=request.now\n    if form.validate(): # vai ser o insert\n        response.flash=form.vars.created_on\n        save_post.delay(form.vars.tweet_id,form.vars.user_id,form.vars.post,form.vars.created_on)\n        update_timeline.delay(form.vars.tweet_id,form.vars.user_id)\n\n    return dict(form=form)\n\n@auth.requires_login()\ndef timeline():\n    import memcache, redis\n    rd=redis.Redis(\'localhost\')\n    mc = memcache.Client([\'localhost:11211\'], debug=1)\n    posts=rd.lrange(\'%s\' %auth.user_id, \'0\', \'-1\')\n    cached_posts = []\n    post_uid = []\n    for p in posts:\n        cached_posts.append(mc.get(\'%s\' %p.split(\';\')[0]))\n        userid=p.split(\';\')[1]\n        rows=db(db.auth_user.id==userid).select()\n        for row in rows:\n            post_uid.append(row.email)\n    return dict(cached_posts=zip(cached_posts,post_uid))\n\n#@auth.requires_login()\n#def timeline():\n#    posts=db(db.tweet).select(orderby=~db.tweet.created_on)\n#    return dict(posts=posts)\n\n\n@auth.requires_login()\ndef user_directory():\n    import memcache\n    users=db(db.auth_user.id!=auth.user_id).select()\n    mc = memcache.Client([\'localhost:11211\'], debug=1)\n    following=mc.get(\'following_%s\' %auth.user_id)\n    if not following:\n        following=[f.following for f in db(db.follow.follower==auth.user_id).select(db.follow.following)]\n        mc.set(\'following_%s\' %auth.user_id, following)\n    return dict(users=users,following=following)\n\n@auth.requires_login()\ndef follow():\n    from tweet_tasks import do_follow\n    user_id=request.args(0)\n    do_follow.delay(int(auth.user_id),int(user_id))\n    return\n\n@auth.requires_login()\ndef unfollow():\n    from tweet_tasks import do_unfollow\n    user_id=request.args(0)\n    do_unfollow.delay(int(auth.user_id),int(user_id))\n    return\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(timeline)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/web2py/applications/twitkiller/controllers/default.py", line 134, in <module>\n  File "/var/www/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/web2py/gluon/tools.py", line 3444, in f\n    return action(*a, **b)\n  File "/var/www/web2py/applications/twitkiller/controllers/default.py", line 49, in timeline\n    rows=db(db.auth_user.id==userid).select()\n  File "/var/www/web2py/gluon/dal/objects.py", line 2066, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 1219, in select\n    sql = self._select(query, fields, attributes)\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 1117, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 897, in expand\n    out = op(first, second, **optional_args)\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 794, in EQ\n    self.expand(second, first.type))\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 908, in expand\n    return str(self.represent(expression,field_type))\n  File "/var/www/web2py/gluon/dal/adapters/base.py", line 1357, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'rcsousa@br.ibm.com\'\n'
p11
s.